#!/usr/bin/env bash
# -*- eval: (read-only-mode 1) -*-
## Evaluates a single Emacs Lisp expression in a running Emacs instance.
#
# Note: we differ from 'elisp' in that we allow you to specify the name of
# the Emacs server that is to evaluate the expression.
#
# Based heavily on code from
# https://github.com/grettke/ebse/blob/master/ebsefn.sh
#
# See also: elisp.
#
# Copyright (C) 2021-2022 by James MacKay.
#
#-This program is free software: you can redistribute it and/or modify
#-it under the terms of the GNU General Public License as published by
#-the Free Software Foundation, either version 3 of the License, or
#-(at your option) any later version.
#
#-This program is distributed in the hope that it will be useful,
#-but WITHOUT ANY WARRANTY; without even the implied warranty of
#-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#-GNU General Public License for more details.
#
#-You should have received a copy of the GNU General Public License
#-along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#set -x

# Redirect output to a log file: it will NOT go to stdout/stderr.
#exec &> ~/log/$(basename "$0")-$(date -Ihours).log

# Strict mode.
STD_IFS="$IFS"  # = space, tab or newline
#STRICT_IFS=$'\n\t'  # remove space from list if input field separators
#STRICT_IFS="$(printf '\n\t')"
#IFS="$STRICT_IFS"
set -u  # don't allow use of unset variables
#set -e  # exit this script if any command fails; use 'set +e' to disable
set -o pipefail  # entire pipe fails if any part does; use 'set +o pipefail'
                 # to disable

# After setting IFS as above, we may need to use a tab in place of a space in
# some places (e.g. when building up options in a variable).
readonly TAB="$(printf '\t')"


# Configuration.

readonly PROG="$(basename "$0")"
readonly PROG_DIR="$(dirname "$0")"  # the directory this script is in

# We're debugging iff the basename we're run under starts with 'debug-' (so
# we don't need to edit this script to switch between debugging and
# production).
#
# Note: $PROG_BASE will be the same as $PROG except any 'debug-' prefix will
# be removed from the start of it.
readonly DEBUG_PREFIX="debug-"
readonly PROG_BASE="${PROG##$DEBUG_PREFIX}"
DO_DEBUG=0
if [ "$PROG_BASE" != "$PROG" ]
then
    DO_DEBUG=1
fi
#echo "Value of DO_DEBUG is $DO_DEBUG"
#exit 0


# Verbosity levels.
ERROR_VERBOSITY_LEVEL=0
WARN_VERBOSITY_LEVEL=1
INFORM_VERBOSITY_LEVEL=2

# Current verbosity level.
[ $DO_DEBUG -eq 0 ] && VERBOSITY=${WARN_VERBOSITY_LEVEL} || \
                       VERBOSITY=${INFORM_VERBOSITY_LEVEL}


ECHOER=echo
ECHOER=

# The name of the main/default Emacs instance.
DEFAULT_SERVER_NAME="server"

# The name of the Emacs program.
EMACS="emacs"

# General utility functions.

function debug() {
    [ $DO_DEBUG -gt 0 ] && echo "${PROG}: $*" >&2
    return 0
}

function inform() {
    [ $VERBOSITY -ge $INFORM_VERBOSITY_LEVEL ] && echo "${PROG}: $*" >&2
    return 0
}

function warn() {
    [ $VERBOSITY -ge $WARN_VERBOSITY_LEVEL ] && echo "${PROG}: $*" >&2
    return 0
}

# usage: die exit-code msg...
function die() {
    local rc=$1

    shift
    cat << +++EOF+++ >&2

${PROG} failed: $*

+++EOF+++
    exit $rc
}

# Causes the shell function that calls this function to output the message
# 'msg' as a warning and then return with return code 'rc' when it's called
# like this:
#
#   someCmd || return $(fail 3 "couldn't find the file '$f'.")
#
# or this:
#
#   someCmd || rc=$(fail 3 "couldn't find the file '$f'.")
#
# usage: fail rc msg
function fail() {
    #called "$@"
    checkArgumentCount $# 2 || return 1

    warn "failed in ${FUNCNAME[1]}(): $2"
    echo $1

    return 0
}

# Logs - using debug() - a call of the shell function that called us with -
# we assume - the same arguments as were passed to us.
#
# usage: called "$@"
function called() {
    local msg="---> ${FUNCNAME[1]}"
    local arg

    for arg in "$@"
    do
        msg="$msg \"$arg\""
    done
    debug "$msg"
}

# Checks that the calling shell function (which is assumed to exist) has been
# called with a valid number of arguments.
#
# Specifically, we check that 'count' is the same as 'expected-count' if
# 'expected-max-count' is omitted, or that 'count' is at least
# 'expected-count' and at most 'expected-max-count' otherwise. Returns 0 if
# it is, and outputs a warning and returns non-zero if it isn't.
#
# usage: checkArgumentCount count expected-count [expected-max-count]
function checkArgumentCount() {
    local rc=0
    local argDesc

    if [ $# -lt 2 ] || [ $# -gt 3 ]
    then
        argDesc="arguments"
        if [ $# -eq 1 ]
        then
            argDesc="argument"
        fi
        warn "invalid checkArgumentCount() use: $# $argDesc specified \
instead of 2 or 3."
        rc=1
    else
        if [ $1 -eq 1 ]
        then
            argDesc="argument"
        else
            argDesc="arguments"
        fi

        if [ $# -eq 2 ]
        then
            if [ $1 -ne $2 ]
            then
                warn "invalid ${FUNCNAME[1]}() use: $1 $argDesc specified \
instead of $2."
                rc=2
            fi
        else
            if [ $1 -lt $2 ] || [ $1 -gt $3 ]
            then
                warn "invalid ${FUNCNAME[1]}() use: $1 $argDesc specified \
instead of between $2 and $3 arguments."
                rc=3
            fi
        fi
    fi

    return $rc
}

# Checks that the calling shell function (which is assumed to exist) has been
# called with the minimum required number of arguments 'min-count'.
#
# Note: this function should only be called for functions that can take an
# unlimited number of arguments: if the function has a maximum number of
# arguments then it should call checkArgumentCount() instead.
#
# usage: checkMinimumArgumentCount count min-count
function checkMinimumArgumentCount() {
    local rc=0
    local argDesc

    if [ $# -ne 2 ]
    then
        argDesc="arguments"
        if [ $# -eq 1 ]
        then
            argDesc="argument"
        fi
        warn "invalid checkMinimumArgumentCount() use: $# $argDesc specified \
instead of 2."
        rc=1
    else
        if [ $1 -lt $2 ]
        then
            argDesc="arguments"
            if [ $1 -eq 1 ]
            then
                argDesc="argument"
            fi
            warn "invalid ${FUNCNAME[1]}() use: $1 $argDesc specified when \
at least $2 are required."
            rc=2
        fi
    fi

    return $rc
}

# Checks that all of the commands named in 'cmd...' exist (presumably because
# they're required by this script to be present). Returns 0 if they're all
# present, and outputs one or more warnings and returns the number of
# commands that are missing otherwise.
#
# Note: this is based heavily on the code found in the "Availability of
# commands" section of http://wiki.bash-hackers.org/scripting/style.
#
# usage: requireCommands cmd...
function requireCommands() {
    local rc=0
    local cmd
    local missing=""

    for cmd in "$@"
    do
        if ! hash "$cmd" >/dev/null 2>&1
        then
            if [ -z "$missing" ]
            then
                missing="$cmd"
            else
                missing="${missing}, $cmd"
            fi
            rc=$((rc+1))
        fi
    done

    if [ $rc -eq 1 ]
    then
        warn "the required command '${missing}' wasn't found in your PATH."
    elif [ $rc -gt 1 ]
    then
        warn "the following ${rc} required commands weren't found in your \
PATH: ${missing}."
    fi

    return $rc
}


# Returns 0 iff the current shell is running under a 'screen' session.
#
# This is useful since starting a screen session while already running under
# screen usually goes ... badly.
#
# Note: this was copied from common-aliases.sh.
#
# usage: is-under-screen
function is-under-screen() {
    checkArgumentCount $# 0 || return 1

    # This was taken from the vterm_printf() defined in editor-aliases.sh.
    [ "${TERM%%-*}" = "screen" ]
}


# Functions.

function usage() {
    if [ $# -gt 0 ]
    then
        cat << +++EOF+++ >&2

${PROG}: $*
+++EOF+++
    fi
    cat << +++EOF+++ >&2

usage: $PROG [-h|-v|-q] -s server-name expr

If the '-h' option is specified then this message is output to
standard output and we exit with exit code 0.

Otherwise the Emacs Lisp expression 'expr' is evaluated in a
running Emacs instance. The main/default instance is used by
default, but if the '-s' option is specified then the one
named 'server-name' is used instead.

If the '-v' option is specified then this program is more
verbose than it is by default; and if the '-q' option is
specified then it is less verbose than it is by default.

+++EOF+++
}

# The function that will be called when this program exits (normally or
# otherwise, assuming it has a chance to clean up).
#
# Note: this function should usually only be called in a trap statement.
#
# usage: destructor
function destructor() {
    return 0
}


# Argument processing.

SERVER_NAME="${DEFAULT_SERVER_NAME}"
while getopts ":vqhs:" opt
do
    case "$opt" in
        s)
            SERVER_NAME="$OPTARG"
            ;;
        v)
            VERBOSITY=2
            ;;
        q)
            VERBOSITY=0
            ;;
        h)
            usage 2>&1 | "${PAGER:-less}"
            exit 0
            ;;
        ?)
            usage "invalid option: -${OPTARG}."
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z "$SERVER_NAME" ]
then
    usage "the server name cannot be an empty string."
    exit 1
fi

if [ $# -gt 1 ]
then
    usage "too many Emacs Lisp expressions ($#) were specified."
    exit 1
fi
if [ $# -eq 0 ]
then
    usage "no Emacs Lisp expression was specified."
    exit 1
fi
EXPR="$1"

# Main program.

requireCommands cat "$EMACS" || exit 2

trap "destructor; exit" INT QUIT TERM EXIT

rc=0

readonly val="$("$EMACS" --batch --eval "(progn (require 'server) (princ (server-eval-at \"$SERVER_NAME\" '$EXPR)))")"
printf "%s\n" "$val"

exit $rc
